---
import type { TreeNode } from '@/types/astro';
import { mysql, pg, sqlite } from "@/data/quickstart.ts";
import PageTypeSwitcherItem from './PageTypeSwitcherItem.astro';
import PageTypeSwitcherSelected from './PageTypeSwitcherSelected.astro';

interface Props {
  slug: string;
  tree: TreeNode[];
}

const items = {
  'quick-mysql': mysql,
  'quick-sqlite': sqlite,
  'quick-postgresql': pg,
};

const svgs = await import.meta.glob<Record<string, any>>('/public/svg/*.svg', { as: 'raw' });

const { slug = '', tree } = Astro.props;

const currentTree = tree.find((item) => slug.startsWith(item.name));
const currentTheme = currentTree?.children?.find((item) => slug.startsWith(`${currentTree.name}/${item.name}/`));
const currentItems = items[(currentTheme?.name as string || 'mysql') as keyof typeof items];
const current = Object.keys(currentItems).find((key) => {
  const item = currentItems[key];
  return item.href === `/${slug}`;
});
const currentItem = currentItems[current as keyof typeof currentItems];

---
<div class="type-selector">
  <div data-type-selector-btn class="type-selector__button" data-dialect={current}>
    <PageTypeSwitcherSelected card={currentItem}  svgs={svgs}/>
  </div>
  <div id="type-selector" class="type-selector__items">
    {Object.keys(currentItems).map((name) => 
      (<a class="type-link" href={currentItems[name].href}>
        <PageTypeSwitcherItem card={currentItems[name]}  svgs={svgs}/>
        </a>)
      )}
  </div>
</div>
<style>
  html[class~=dark] .type-link {
    border-color: rgb(64 64 64) !important;
    background-color: #111111;
  }

  html[class~=dark] .type-link:hover {
    background-color: rgb(23 23 23);
  }

  .type-link:hover {
    background: #f8fafc;
  }

  .type-link {
    color: inherit;
    text-decoration: none;
    border-radius: 2px;
  }

  .type-selector {
    position: relative;
    user-select: none;
  }

  .type-selector__button {
    position: relative;
    cursor: pointer;
    float: right;
  }

  html[class~=dark] .type-selector__items {
    background-color: #111111;
    border: 1px solid #333333;
    box-shadow: rgba(255, 255, 255, 0.05) 0px 0px 16px;
  }

  .type-selector__items {
    position: absolute;
    display: none;
    flex-direction: column;
    top: 100%;
    right: 0;
    margin-top: 8px;
    z-index: 100;
    padding: 12px;
    background: #fff;
    border-radius: 4px;
    width: 320px;
    border: 1px solid #e4e4e5;
    box-shadow: rgba(17, 17, 26, 0.1) 0px 0px 16px;
  }

  @media screen and (max-width: 768px) {
    .type-selector__items {
      right: 0;
      left: 0;
    }
  }
</style>
<script>
  const typeSelectorBtn = document.querySelector('[data-type-selector-btn]') as HTMLDivElement;
  const typeSelectorItems = document.getElementById('type-selector') as HTMLDivElement;
  if(typeSelectorBtn) {
    typeSelectorBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      typeSelectorItems.classList.toggle("d-flex");
    });
  }

  window.addEventListener('click', (e) => {
    if (!(e.target as HTMLElement).className.includes('type-selector__button')) {
      if (typeSelectorItems.classList.contains('d-flex')) {
        typeSelectorItems.classList.remove('d-flex');
      }
    }
  })

</script>