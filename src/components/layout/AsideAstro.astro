---
import type { IHeading, TreeNode } from "../../types/astro";

interface Props {
  headings?: IHeading[];
  tree: TreeNode[];
  slug: string;
}

const {headings, slug = "", tree} = Astro.props;
const isActive = (path: string) => {
  const pathArray = path.split("/");
  const slugArray = slug.split("/");
  return pathArray.every((element, index) => element === slugArray[index]);
}
---

<div class="nav-items">{
  tree
  .filter((t) => isActive(t.name))
  .map(
    (t) =>
      t.children?.map((n) => (
        <Fragment key={n.name}> 
          {
            n.type === "separator" && ( <div class="nav-separator"> 
              {n.title}
              </div>
            )
          } 
          {
            n.type === "mdx" && ( 
              <a 
              class:list={
                [isActive(`${t.name}/${n.name}`) ? "nav-item--active" : "nav-item", "nav-item-1"]
              }
                href={
                `/${t.name}/${n.name}`
              }>
                {n.title}
              </a>)
          }   
          {
            n.type === "subDir" &&
            (
              <a 
                class:list={
                [isActive(`${t.name}/${n.name}`) ? "nav-item--active" : "nav-item", 'nav-item-1']}
                href={`/${t.name}/${n.name}/${n.children?.[0].name}`}
                >
                  {n.title}
              </a>)
          } 
          {
            n.type === "withDialects" &&
            (
              <a 
                data-href={`/${t.name}/${n.name}`}
                class:list={
                [isActive(`${t.name}/${n.name}`) ? "nav-item--active" : "nav-item", 'nav-item-1']}
                >
                  {n.title}
              </a>)
          }
          {
            headings &&
            slug &&
            slug.split("/")[1] === n.name &&
            slug === `${t.name}/${n.name}` &&
            (<div> {
                headings.map((heading) => (<a 
                  data-slug={heading.slug}
                  class:list={
                    [
                      "nav-toc-item",
                      'heading-2'
                    ]
                  }
                  href={`#${heading.slug}`}> 
                    {heading.text}
                  </a>
                ))
              }</div>
            )
          } 
          {
            n.children?.map((c) => ( 
              <Fragment> 
              {
                headings &&
                slug &&
                slug.split("/")[2] === c.name &&
                slug === `${t.name}/${n.name}/${c.name}` &&
                ( <div> {
                    headings.map((heading) => (<a 
                      data-slug={heading.slug}
                      class:list={
                        ["nav-toc-item", 'heading-2']
                      }
                      href={`#${heading.slug}`}>{heading.text}</a>
                    ))
                  }</div>
                )
              }
              </Fragment>
                  ))
                } 
            </Fragment>
          )),
        )
      } 
    </div>
<script>import updateDialectLinks from "@/utils/updateDialectLinks";

const allHeadingTocElements = document.querySelectorAll('[data-slug]');
const headingElements = document.querySelectorAll("h2, h3");

  const activeAnchors: {
    [key: string]: boolean;
  } = {}

  const handleObserver = (entries: IntersectionObserverEntry[]) => {
    entries.forEach(entry => {
      const { isIntersecting } = entry;
      activeAnchors[entry.target.id] = isIntersecting;
    });
    allHeadingTocElements.forEach((elem) => {
      const slug = (elem as HTMLAnchorElement).dataset.slug;
      if(!slug) return;
      elem.classList.toggle("nav-toc-item--active", activeAnchors[slug]);
      elem.classList.toggle("nav-toc-item", !activeAnchors[slug]);
    });
  }

  const observer = new IntersectionObserver(handleObserver, {
    rootMargin: "0px 0px",
    threshold: [0, 1],
  });

  headingElements.forEach((elem) => observer.observe(elem));

  updateDialectLinks();

</script>